// <auto-generated />
using System;
using AccountService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccountService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250815161339_FixAccureResult")]
    partial class FixAccureResult
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gist");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountService.Features.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("LastInterestAccrualDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OpenedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OwnerId"), "hash");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AccountService.Features.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CounterpartyAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "Timestamp")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_Transactions_AccountId_Timestamp");

                    b.HasIndex(new[] { "Timestamp" }, "IX_Transactions_Date_Gist")
                        .HasDatabaseName("IX_Transactions_Date_Gist");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Timestamp" }, "IX_Transactions_Date_Gist"), "gist");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AccountService.Shared.Domain.AccrualResult", b =>
                {
                    b.Property<decimal>("AccruedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("accrued_amount");

                    b.Property<DateTime?>("PeriodFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("period_from");

                    b.Property<DateTime?>("PeriodTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("period_to");

                    b.ToTable("AccrualResults");
                });

            modelBuilder.Entity("AccountService.Shared.Domain.InboxConsumedMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Handler")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id", "Handler");

                    b.HasIndex("Id");

                    b.ToTable("inbox_consumed_messages", (string)null);
                });

            modelBuilder.Entity("AccountService.Shared.Domain.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_OutboxMessages_ProcessedAt_Pending")
                        .HasFilter("\"ProcessedAt\" IS NULL");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("AccountService.Features.Transactions.Transaction", b =>
                {
                    b.HasOne("AccountService.Features.Accounts.Account", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountService.Features.Accounts.Account", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
